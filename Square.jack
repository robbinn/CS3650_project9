// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Square {

   field int x, y; // screen location of the square's top-left corner
   field int size; // length of this square, in pixels
   field int pos;
   field Wall wall;
   field int rowSize;

   /** Constructs a new square with a given location and size. */
   constructor Square new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let pos = 0;
      let rowSize = 20;
      let size = Asize;
      let wall = Wall.new(10);
      do draw();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
      return;
   }

   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }


   method void moveUp() {
      var boolean checkWall;
      let checkWall = false;
      if (pos > 19) {
         let checkWall = wall.isWall((pos-rowSize));
        }
        
      if (y > 1) {
        if (~checkWall) {
        do Screen.setColor(false);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let y = y - size;
         do Screen.setColor(true);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let pos = pos - rowSize;
            }
      }
      return;
   }


   method void moveDown() {
      var boolean checkWall;
      let checkWall = false;
      if (pos < 380) {
         let checkWall = wall.isWall((pos+rowSize));
        }
        
        if ((y + size) < (size * 20)) {
        if (~checkWall) {
        do Screen.setColor(false);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let y = y + size;
         do Screen.setColor(true);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let pos = pos + rowSize;
        }

      }
      return;
      
   }


   method void moveLeft() {
      var boolean checkWall;
      let checkWall = false;
      if (pos > 0) {
         let checkWall = wall.isWall((pos-1));
        }

      
      if (x > 1) {
        if (~checkWall) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let x = x - size;
         do Screen.setColor(true);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let pos = pos - 1;
        }
      }

      return;
   }


   method void moveRight() {
      var boolean checkWall;
      let checkWall = false;
    if (pos < 399) {
         let checkWall = wall.isWall((pos+1));
        }

      
      if ((x + size) < (size * 20)) {
         if (~checkWall) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let x = x + size;
         do Screen.setColor(true);
         do Screen.drawRectangle(x + 2, y + 2, x + size - 2, y + size - 2);
         let pos = pos + 1;
        }
      }
      return;
   }
}
